#!/usr/bin/env bash

set -euo pipefail

##
# @file release
# Perform a release for the current project.
#
# A release primarily consists of creating a git tag for the version
# and recording the version in a properties file passed as an argument.
#
# @author Matt Whipple
# @author Brightcove
# @copyright Apache License, Version 2.0
# @version 1.2.0
# source_repository https://github.com/mwhipple/buildsrc
#
# @param $1 The path to the properties file where the version is stored.
##

#-------------------------------------------------------------------------
# Copyright 2020 Brightcove
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------

##
# This script depends on several environment variables being provided.
# Each of these is declared and documented between this comment
# block and the first function declaration.
##

##
# Define an alias for the name used to invoke this script.
##
declare -r me=$0

##
# Specify the properties file which contains the version to release.
#
# This file should contain a line similar to:
# VERSION=1.0.0-SNAPSHOT
#
# This script is designed to work with multi-part version
# numbers such as the triplets used in semantic versioning.
# Behavior with other styles of version numbers is currently
# unspecified and not likely to be desirable.
# There is upcoming work to allow customization of version
# number management.
##
declare -r prop_file=${1-}

##
# Define the current version according to prop_file.
#
# This will normally be provided by sourcing/including PROP_FILE.
##
declare VERSION

##
# Use default versions without prompting if this is true.
##
declare -r AUTO_VERSION

##
# Explicitly/eagerly provide the version to release.
#
# This will ignore the value currently in build.properties.
##
declare -r RELEASE_VERSION

##
# Specify the git executable to call.
#
# If this is not already set the path will be searched.
##
declare GIT

##
# (Optional) Specify where hook scripts are located.
#
# This defaults to the directory of release script.
#
# Hook scripts allow for plugging in functionality to the release flow.
# Currently supported hook is:
#   - release::pre_release_hook
##
declare RELEASE_HOOK_DIR

##
# (Optional) Indicate whether to output additional information.
#
# If passed, then this script will be chatty,
# otherwise silence implies success.
##
declare -r RELEASE_VERBOSE

##
# (Optional) Indicate whether this is a release from a branch.
#
# Branch releases may be less restrictive
# but also mark themselves more loudly.
##
declare -r BRANCH_RELEASE

##
# (Optional) Specfy the primary branch from which releases will be cut.
#
# If the working directory is not on this branch and synchronized then
# any non-branch release will fail.
#
# This defaults to `master`.
##
declare -r RELEASE_MASTER=${RELEASE_MASTER:-master}

##
# (Optional) Specfy the primary remotes to which releases will be pushed.
#
# If the working directory is not synchronized with this remote
# then any non-branch release will fail.
#
# This defaults to `origin`.
##
declare -r RELEASE_REMOTE=${RELEASE_REMOTE:-origin}

##
# Perform a release for the application, coordinating relevant bits.
#
# Release related actions will be performed by this script
# so that it can manage some level of transactionaltiy and
# rollback/abort as necessary.
#
# Currently this script is not particularly robust.
# It should be strengthened as failure scenarios are encountered.
#
# Globals:
#   prop_file[in]
#   GIT[in]
#   BIN_DIR[in]
#   VERSION[in,out]
##
release::main() {
  release::find_deps

  local release_lock="${prop_file}.releasing"
  release::validate_config "${release_lock}"
  source ${prop_file}

  [[ -n "${BRANCH_RELEASE-}" ]] \
    || release::git_is_synched \
    || release::die 'Out of sync, aborting.'

  touch "${release_lock}"

  # Cut and push released version
  release::update_version "Version to release" "$(release::determine_version)"

  release::pre_release_hook || release::info 'No pre_release hooks'

  ${GIT} add "${prop_file}"
  ${GIT} commit -m "Update to version ${VERSION}"
  ${GIT} tag -a "${VERSION}" -m "Release [${VERSION}]"
  ${GIT} push ${RELEASE_REMOTE} ${VERSION}

  [[ -n "${BRANCH_RELEASE-}" ]] || release::postrelease_version

  rm "${release_lock}"
}

##
# Locate and set dependencies or die trying.
##
release::find_deps() {
  if [[ -x "${GIT:=$(which git)}" ]]; then
    readonly GIT
  else
    release::die "git is required but cannot be found or executed!"
  fi
  if [[ -z "${RELEASE_HOOK_DIR-}" ]]; then
    RELEASE_HOOK_DIR="$( \
      cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
    readonly RELEASE_HOOK_DIR
  fi
}

##
# Assert that the configuration and invocation are valid.
#
# If validation fails then the script will output an error
# and exit with a failure status of 1.
#
# Globals:
#   prop_file[in]
#
# @param $1 The file name of the an in-flight release lock.
##
release::validate_config() {
  local release_lock=$1

  [[ -n "${prop_file}" ]] || release::die \
    'Missing Argument' "$(release::usage)"

  [[ -f "${prop_file}" ]] || release::die \
    "Build property file ${prop_file} not present or not a file."

  [[ -w "${prop_file}" ]] || release::die \
    "Build property file ${prop_file} is not writable."

  # The test is flipped so the expression/return is successful.
  [[ ! -f "${release_lock}" ]] || release::die \
    "${release_lock} already exists." \
    " Clean up previous release before continuing."
}

##
# Check whether the current git branch is in-synch with its origin.
#
# This includes verifying that the current branch is master
# and the revisions match between the peers.
#
# Globals:
#   GIT
#
# @return 0 (success) if everything appears to be in sync,
#         1 (failure) if there is a mismatch.
##
release::git_is_synched() {
  local status
  local statuses
  local -i synched

  # Make sure to have an up-to-date view of origin.
  ${GIT} remote update

  statuses=$(${GIT} status -sb | awk -v master="${RELEASE_MASTER}" \
				     -v remote="${RELEASE_REMOTE}" \
				     '/##/ { \
  if ($2 != sprintf("%s...%s/%s", master, remote, master)) { print "NOT_MASTER" }; \
  s[$3]=1 \
}; \
{s[$1]=1} \
END {for (t in s) { print t}}
')
  (( synched=0 ))

  for status in $statuses; do
    case $status in
      'NOT_MASTER')
        release::error 'Not on master!.'
        (( synched=1 ))
        ;;
      'M')
        release::error 'Modified files exist. Commit and push change.'
        (( synched=1 ))
        ;;
      '??')
        release::error 'Untracked files exist. Commit and push change.'
        (( synched=1 ))
        ;;
      '[ahead')
        release::error 'Local git is ahead of origin. Push changes.'
        (( synched=1 ))
        ;;
      '[behind')
        release::error 'Local git is behind origin. Pull changes.'
        (( synched=1 ))
        ;;
    esac
  done

  return $synched
}

##
# Produce an awk script which will verify the current upstream.
#
# This primarily serves to wrap the script up into a heredoc
# which supports less escape-y interpolation.
##
release::awk_upstream_check() {
    cat <<EOF
EOF
}

##
# Output the version to release (to be captured).
#
# If RELEASE_VERSION is specified, echoes that value.
#
# Use release_version handler if registered,
# otherwise return VERSION without a '-QUALIFIER`.
#
# If such a handler is installed it will be passed
# VERSION as an argument and should write the version
# to release to stdout (and that should be the only output
# of the handler).
#
# A function takes precedence over a script.
# release_version is technically a prefix and so there could
# presumably be multiple matching handlers but this is
# not supported/produces undefined behavior.
##
release::determine_version() {
  if [[ -n "${RELEASE_VERSION-}" ]]; then
    echo "${RELEASE_VERSION}"
  else
    release::handler_fns 'release_version' "${VERSION}" \
      || release::handler_scripts 'release_version' "${VERSION}" \
      || echo "${VERSION%%-*}"
  fi
}

##
# Output the version to commit after the release (to be captured).
#
# Use release_postversion handler if registered,
# otherwise increment the last number in VERSION and add '-SNAPSHOT`.
#
# If such a handler is installed it will be passed VERSION
# as an argument and should write the post release version to stdout
# (and that should be the only output of the handler).
#
# A function takes precedence over a script.
# release_postversion is technically a prefix and so there could
# presumably be multiple matching handlers but this is
# not supported/produces undefined behavior.

##
release::determine_postrelease_version() {
    if ! (release::handler_fns 'release_postversion' "${VERSION}" \
	      || release::handler_scripts 'release_postversion' "${VERSION}"); then
	local -i new_micro
	((new_micro="${VERSION##*.}" + 1))
	echo "${VERSION%.*}.${new_micro}-SNAPSHOT"
    fi
}

##
# Prompt the user for a new version which is then used.
#
# The new version is updated in prop_file and that file is then
# re-sourced to update the running environment.
#
# Globals:
#   prop_file[in]
#   VERSION[out]
#   AUTO_VERSION[in]
#
# @param $1 The text prompt to display to the user.
# @param $2 The default version to display and use if nothing is entered.
##
release::update_version() {
  local prompt=$1
  local default_version=$2
  local temp_file
  local version_provided
  local new_version

  temp_file="${prop_file}.release"
  [[ -f "${temp_file}" ]] && release::die "${temp_file} file already exists. Remove if stale"


  # Determine new version.
  [[ -n "${BRANCH_RELEASE-}" ]] && prompt="(BRANCH) $prompt"
  if [[ -n "${AUTO_VERSION-}" ]]; then
    release::info "Releasing version: '${default_version}'"
  else
    read -p "${prompt} [${default_version}]:" version_provided
  fi

  new_version=${version_provided:-$default_version}
  [[ -n "${BRANCH_RELEASE-}" ]] && new_version="${new_version}-BRANCH"

  # Update and source prop_file.
  sed "s/^VERSION=.*$/VERSION=${new_version}/" "${prop_file}" > "${temp_file}"
  mv "${temp_file}" "${prop_file}"
  source "${prop_file}"
}

##
# Call all pre_release_hook scripts or functions.
#
# Any script present in the RELEASE_HOOK_DIR and any defined functions
# matching the pattern
# 'pre_release_' will be executed as:
#    $script "${prop_file}" "${VERSION}" "${BRANCH_RELEASE-}"
##
release::pre_release_hook() {
  release::handler_scripts 'pre_release_*' "${prop_file}" "${VERSION}" "${BRANCH_RELEASE-}"
  release::handler_fns 'pre_release_' "${prop_file}" "${VERSION}" "${BRANCH_RELEASE-}"
}

##
# Optionally output information about typical operation.
#
# This will be suppressed if not in verbose mode.
#
# @param $@ Informative message.
##
release::info() {
  [[ -z "${RELEASE_VERBOSE-}" ]] || echo $@
}

##
# Utility function to exit with a failure message.
#
# @param $@ Message to output before exiting.
##
release::die() {
  release::error "ERROR: $@"
  exit 1
}

##
# Output usage information.
#
# Will output guidance on how to invoke this script
# for cases where it has not been invoked usably.
##
release::usage() {
  cat <<EOF

Usage: $me <prop_file>

prop_file
	The name of the properties file containing the VERSION.

More documentation is available in the script file itself.
EOF
}

##
# Utility function to echo to stderr.
#
# @param $@ The arguments to pass through to echo.
##
release::error() {
  echo "$@" >&2
}

##
# Cut and push post-release version.
#
# The released version should only be associated with code at the
# time of the release to avoid ambiguity,
# so this updates the version immediately after the release.
#
# Globals:
#   VERSION[in]
#   prop_file[in]
#   GIT[in]
##
release::postrelease_version() {
  release::update_version "Post-release version" "$(release::determine_postrelease_version)"

  ${GIT} add "${prop_file}"
  ${GIT} commit -m "Post release version ${VERSION}"
  ${GIT} push
}

##
# Execute any present handler functions baed on the provided arguments.
#
# The first paramter s the pattern or name of functions to invoke,
# and all further parameters will be passed to the function.
#
# @param $1 Specify the name or pattern of the handler function to invoke.
# @param $2 Provide arguments to pass to the invoked functions.
# @return 0 Return 0 if any functions were invoked, 1 if none were found.
##
release::handler_fns() {
  local fn
  local -i unfound=1
  args="${@:2}"
  for fn in $(compgen -A function "$1"); do
    ${fn} ${args}
    unfound=0
  done
  [[ $unfound -eq 0 ]]
}

##
# Execute any present handler scripts based on the provided arguments.
#
# The first parameter is the pattern or name of scripts to invoke,
# and all further parameters will be passed to the script.
# If any handler script exists but fails, execution will abort
# with that failure.
#
# @param $1 Specify the name or pattern of the handler scripts to execute.
# @param $2 Provide arguments to pass to the invoked scripts.
# @return Return 0 if any scripts were found, 1 if none were found.
##
release::handler_scripts() {
  local script
  local -i unfound=1
  shopt -s nullglob
  args="${@:2}"
  for script in "${RELEASE_HOOK_DIR}"/$1; do
    if [[ -x "${script}" ]]; then
      ${script} ${args} || exit $?
      unfound=0
    else
      release::error "$script is not executable, skipping."
    fi
  done
  shopt -u nullglob;
  [[ $unfound -eq 0 ]]
}

release::main

exit 0

##
# CHANGELOG
#
# 1.2.0
# ------
# - Provide version strategy hooks.
#
# 1.1.0
# ------
# - Take prop file as argument, drop proj dir
# - Lint script, update conventions
# - Split out changelog into release
#
# 1.0.0
# -----
# - Initial Release
##
